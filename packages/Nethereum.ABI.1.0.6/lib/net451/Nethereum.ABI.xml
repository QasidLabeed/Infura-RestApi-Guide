<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nethereum.ABI</name>
    </assembly>
    <members>
        <member name="T:Nethereum.ABI.ABIType">
            <summary>
            Generic ABI type
            </summary>
        </member>
        <member name="P:Nethereum.ABI.ABIType.Name">
            <summary>
            The type name as it was specified in the interface description
            </summary>
        </member>
        <member name="P:Nethereum.ABI.ABIType.CanonicalName">
            <summary>
            The canonical type name (used for the method signature creation)
            E.g. 'int' - canonical 'int256'
            </summary>
        </member>
        <member name="M:Nethereum.ABI.ABIType.Encode(System.Object)">
            <summary>
            Encodes the value according to specific type rules </summary>
            <param name="value"> </param>
        </member>
        <member name="P:Nethereum.ABI.ABIType.FixedSize">
            <returns> fixed size in bytes or negative value if the type is dynamic </returns>
        </member>
        <member name="M:Nethereum.ABI.FunctionEncoding.FunctionCallDecoder.DecodeOutput``1(System.String,Nethereum.ABI.FunctionEncoding.Parameter[])">
            <summary>
             Decodes the output of a function using either a FunctionOutputAttribute  (T)
              or the parameter casted to the type T, only one outputParameter should be used in this scenario.
             </summary>
              
        </member>
        <member name="T:Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter">
            <summary>
            This is a replication (copy) of Newtonsoft ExpandoObjectConverter to allow for PCL compilaton
            </summary>
        </member>
        <member name="M:Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Nethereum.ABI.Util.ByteUtil.AppendByte(System.Byte[],System.Byte)">
            <summary>
            Creates a copy of bytes and appends b to the end of it
            </summary>
        </member>
        <member name="M:Nethereum.ABI.Util.ByteUtil.Merge(System.Byte[][])">
            <param name ="arrays"> - arrays to merge </param>
            <returns> - merged array </returns>
        </member>
    </members>
</doc>
