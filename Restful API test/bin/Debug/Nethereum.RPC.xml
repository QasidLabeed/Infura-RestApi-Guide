<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nethereum.RPC</name>
    </assembly>
    <members>
        <member name="T:Nethereum.RPC.Eth.EthAccounts">
            <Summary>
                eth_accounts
                Returns a list of addresses owned by client.
                Parameters
                none
                Returns
                Array of DATA, 20 Bytes - addresses owned by the client.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": ["0x407d73d8a49eeb85d32cf465507dd71d507100c1"]
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthCoinBase">
            <Summary>
                eth_coinbase
                Returns the client coinbase address.
                Parameters
                none
                Returns
                DATA, 20 bytes - the current coinbase address.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_coinbase","params":[],"id":64}'
                Result
                {
                "id":64,
                "jsonrpc": "2.0",
                "result": "0x407d73d8a49eeb85d32cf465507dd71d507100c1"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthGasPrice">
            <Summary>
                eth_gasPrice
                Returns the current price per gas in wei.
                Parameters
                none
                Returns
                QUANTITY - integer of the current gas price in wei.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_gasPrice","params":[],"id":73}'
                Result
                {
                "id":73,
                "jsonrpc": "2.0",
                "result": "0x09184e72a000" // 10000000000000
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthGetBalance">
            <Summary>
                eth_getBalance
                Returns the balance of the account of given address.
                Parameters
                DATA, 20 Bytes - address to check for balance.
                QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block
                parameter
                params: [
                '0x407d73d8a49eeb85d32cf465507dd71d507100c1',
                'latest'
                ]
                Returns
                QUANTITY - integer of the current balance in wei.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x407d73d8a49eeb85d32cf465507dd71d507100c1",
                "latest"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x0234c8a3397aab58" // 158972490234375000
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthGetCode">
            <Summary>
                eth_getCode
                Returns code at a given address.
                Parameters
                DATA, 20 Bytes - address
                QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block
                parameter
                params: [
                '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',
                '0x2'  // 2
                ]
                Returns
                DATA - the code from the given address.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getCode","params":["0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b", "0x2"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthGetStorageAt">
            <Summary>
                eth_getStorageAt
                Returns the value from a storage position at a given address.
                Parameters
                DATA, 20 Bytes - address of the storage.
                QUANTITY - integer of the position in the storage.
                QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block
                parameter
                params: [
                '0x407d73d8a49eeb85d32cf465507dd71d507100c1',
                '0x0', // storage position at 0
                '0x2' // state at block number 2
                ]
                Returns
                DATA - the value at this storage position.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getStorageAt","params":["0x407d73d8a49eeb85d32cf465507dd71d507100c1", "0x0",
                "0x2"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x03"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthProtocolVersion">
            <Summary>
                eth_protocolVersion
                Returns the current ethereum protocol version.
                Parameters
                none
                Returns
                String - The current ethereum protocol version
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_protocolVersion","params":[],"id":67}'
                Result
                {
                "id":67,
                "jsonrpc": "2.0",
                "result": "54"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthSign">
            <Summary>
                eth_sign
                Signs data with a given address.
                Note the address to sign must be unlocked.
                Parameters
                DATA, 20 Bytes - address
                DATA, Data to sign
                Returns
                DATA: Signed data
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_sign","params":["0xd1ade25ccd3d550a7eb532ac759cac7be09c2719",
                "Schoolbus"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result":
                "0x2ac19db245478a06032e69cdbd2b54e648b78431d0a47bd1fbab18f79f820ba407466e37adbe9e84541cab97ab7d290f4a64a5825c876d22109f3bf813254e8601"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.EthSyncing">
            <Summary>
                eth_syncing
                Returns an object object with data about the sync status or FALSE.
                Parameters
                none
                Returns
                Object|Boolean, An object with sync status data or FALSE, when not syncing:
                startingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his
                head)
                currentBlock: QUANTITY - The current block, same as eth_blockNumber
                highestBlock: QUANTITY - The estimated highest block
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": {
                startingBlock: '0x384',
                currentBlock: '0x386',
                highestBlock: '0x454'
                }
                }
                Or when not syncing
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": false
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthBlockNumber">
            <Summary>
                eth_blockNumber
                Returns the number of most recent block.
                Parameters
                none
                Returns
                QUANTITY - integer of the current block number the client is on.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":83}'
                Result
                {
                "id":83,
                "jsonrpc": "2.0",
                "result": "0x4b7" // 1207
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsByHash">
            <Summary>
                eth_getBlockByHash
                Returns information about a block by hash.
                Parameters
                DATA, 32 Bytes - Hash of a block.
                Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.
                params: [
                '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331',
                true
                ]
                Returns
                Object - A block object, or null when no block was found:
                number: QUANTITY - the block number. null when its pending block.
                hash: DATA, 32 Bytes - hash of the block. null when its pending block.
                parentHash: DATA, 32 Bytes - hash of the parent block.
                nonce: DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
                sha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block.
                logsBloom: DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
                transactionsRoot: DATA, 32 Bytes - the root of the transaction trie of the block.
                stateRoot: DATA, 32 Bytes - the root of the final state trie of the block.
                receiptsRoot: DATA, 32 Bytes - the root of the receipts trie of the block.
                miner: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
                difficulty: QUANTITY - integer of the difficulty for this block.
                totalDifficulty: QUANTITY - integer of the total difficulty of the chain until this block.
                extraData: DATA - the "extra data" field of this block.
                size: QUANTITY - integer the size of this block in bytes.
                gasLimit: QUANTITY - the maximum gas allowed in this block.
                gasUsed: QUANTITY - the total used gas by all transactions in this block.
                timestamp: QUANTITY - the unix timestamp for when the block was collated.
                transactions: Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given
                parameter.
                uncles: Array - Array of uncle hashes.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getBlockByHash","params":["0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                true],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": {
                "number": "0x1b4", // 436
                "hash": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "parentHash": "0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5",
                "nonce": "0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2",
                "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                "logsBloom": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                "stateRoot": "0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff",
                "miner": "0x4e65fda2159562a496f9f3522f89122a3088497a",
                "difficulty": "0x027f07", // 163591
                "totalDifficulty":  "0x027f07", // 163591
                "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "size":  "0x027f07", // 163591
                "gasLimit": "0x9f759", // 653145
                "minGasPrice": "0x9f759", // 653145
                "gasUsed": "0x9f759", // 653145
                "timestamp": "0x54e34e8e" // 1424182926
                "transactions": [{...},{ ... }]
                "uncles": ["0x1606e5...", "0xd5145a9..."]
                }
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsHashesByHash">
            <Summary>
                eth_getBlockByHash
                Returns information about a block by hash.
                Parameters
                DATA, 32 Bytes - Hash of a block.
                Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.
                params: [
                '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331',
                true
                ]
                Returns
                Object - A block object, or null when no block was found:
                number: QUANTITY - the block number. null when its pending block.
                hash: DATA, 32 Bytes - hash of the block. null when its pending block.
                parentHash: DATA, 32 Bytes - hash of the parent block.
                nonce: DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
                sha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block.
                logsBloom: DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
                transactionsRoot: DATA, 32 Bytes - the root of the transaction trie of the block.
                stateRoot: DATA, 32 Bytes - the root of the final state trie of the block.
                receiptsRoot: DATA, 32 Bytes - the root of the receipts trie of the block.
                miner: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
                difficulty: QUANTITY - integer of the difficulty for this block.
                totalDifficulty: QUANTITY - integer of the total difficulty of the chain until this block.
                extraData: DATA - the "extra data" field of this block.
                size: QUANTITY - integer the size of this block in bytes.
                gasLimit: QUANTITY - the maximum gas allowed in this block.
                gasUsed: QUANTITY - the total used gas by all transactions in this block.
                timestamp: QUANTITY - the unix timestamp for when the block was collated.
                transactions: Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given
                parameter.
                uncles: Array - Array of uncle hashes.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getBlockByHash","params":["0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                true],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": {
                "number": "0x1b4", // 436
                "hash": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "parentHash": "0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5",
                "nonce": "0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2",
                "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                "logsBloom": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                "stateRoot": "0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff",
                "miner": "0x4e65fda2159562a496f9f3522f89122a3088497a",
                "difficulty": "0x027f07", // 163591
                "totalDifficulty":  "0x027f07", // 163591
                "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "size":  "0x027f07", // 163591
                "gasLimit": "0x9f759", // 653145
                "minGasPrice": "0x9f759", // 653145
                "gasUsed": "0x9f759", // 653145
                "timestamp": "0x54e34e8e" // 1424182926
                "transactions": [{...},{ ... }]
                "uncles": ["0x1606e5...", "0xd5145a9..."]
                }
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsByNumber">
            <Summary>
                eth_getBlockByNumber
                Returns information about a block by block number.
                Parameters
                QUANTITY|TAG - integer of a block number, or the string "earliest", "latest" or "pending", as in the default block
                parameter.
                Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.
                params: [
                '0x1b4', // 436
                true
                ]
                Returns
                See eth_getBlockByHash
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1b4", true],"id":1}'
                Returns
                Object - A block object, or null when no block was found:
                number: QUANTITY - the block number. null when its pending block.
                hash: DATA, 32 Bytes - hash of the block. null when its pending block.
                parentHash: DATA, 32 Bytes - hash of the parent block.
                nonce: DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
                sha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block.
                logsBloom: DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
                transactionsRoot: DATA, 32 Bytes - the root of the transaction trie of the block.
                stateRoot: DATA, 32 Bytes - the root of the final state trie of the block.
                receiptsRoot: DATA, 32 Bytes - the root of the receipts trie of the block.
                miner: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
                difficulty: QUANTITY - integer of the difficulty for this block.
                totalDifficulty: QUANTITY - integer of the total difficulty of the chain until this block.
                extraData: DATA - the "extra data" field of this block.
                size: QUANTITY - integer the size of this block in bytes.
                gasLimit: QUANTITY - the maximum gas allowed in this block.
                gasUsed: QUANTITY - the total used gas by all transactions in this block.
                timestamp: QUANTITY - the unix timestamp for when the block was collated.
                transactions: Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given
                parameter.
                uncles: Array - Array of uncle hashes.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getBlockByHash","params":["0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                true],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": {
                "number": "0x1b4", // 436
                "hash": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "parentHash": "0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5",
                "nonce": "0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2",
                "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                "logsBloom": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                "stateRoot": "0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff",
                "miner": "0x4e65fda2159562a496f9f3522f89122a3088497a",
                "difficulty": "0x027f07", // 163591
                "totalDifficulty":  "0x027f07", // 163591
                "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "size":  "0x027f07", // 163591
                "gasLimit": "0x9f759", // 653145
                "minGasPrice": "0x9f759", // 653145
                "gasUsed": "0x9f759", // 653145
                "timestamp": "0x54e34e8e" // 1424182926
                "transactions": [{...},{ ... }]
                "uncles": ["0x1606e5...", "0xd5145a9..."]
                }
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthGetBlockTransactionCountByHash">
            <Summary>
                eth_getBlockTransactionCountByHash
                Returns the number of transactions in a block from a block matching the given block hash.
                Parameters
                DATA, 32 Bytes - hash of a block
                params: [
                '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238'
                ]
                Returns
                QUANTITY - integer of the number of transactions in this block.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getBlockTransactionCountByHash","params":["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0xb" // 11
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthGetBlockTransactionCountByNumber">
            <Summary>
                eth_getBlockTransactionCountByNumber
                Returns the number of transactions in a block from a block matching the given block number.
                Parameters
                QUANTITY|TAG - integer of a block number, or the string "earliest", "latest" or "pending", as in the default block
                parameter.
                params: [
                '0xe8', // 232
                ]
                Returns
                QUANTITY - integer of the number of transactions in this block.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getBlockTransactionCountByNumber","params":["0xe8"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0xa" // 10
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsHashesByNumber">
            <Summary>
                eth_getBlockByNumber
                Returns information about a block by block number.
                Parameters
                QUANTITY|TAG - integer of a block number, or the string "earliest", "latest" or "pending", as in the default block
                parameter.
                Boolean - If true it returns the full transaction objects, if false only the hashes of the transactions.
                params: [
                '0x1b4', // 436
                true
                ]
                Returns
                See eth_getBlockByHash
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1b4", true],"id":1}'
                Returns
                Object - A block object, or null when no block was found:
                number: QUANTITY - the block number. null when its pending block.
                hash: DATA, 32 Bytes - hash of the block. null when its pending block.
                parentHash: DATA, 32 Bytes - hash of the parent block.
                nonce: DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
                sha3Uncles: DATA, 32 Bytes - SHA3 of the uncles data in the block.
                logsBloom: DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
                transactionsRoot: DATA, 32 Bytes - the root of the transaction trie of the block.
                stateRoot: DATA, 32 Bytes - the root of the final state trie of the block.
                receiptsRoot: DATA, 32 Bytes - the root of the receipts trie of the block.
                miner: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
                difficulty: QUANTITY - integer of the difficulty for this block.
                totalDifficulty: QUANTITY - integer of the total difficulty of the chain until this block.
                extraData: DATA - the "extra data" field of this block.
                size: QUANTITY - integer the size of this block in bytes.
                gasLimit: QUANTITY - the maximum gas allowed in this block.
                gasUsed: QUANTITY - the total used gas by all transactions in this block.
                timestamp: QUANTITY - the unix timestamp for when the block was collated.
                transactions: Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given
                parameter.
                uncles: Array - Array of uncle hashes.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getBlockByHash","params":["0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                true],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": {
                "number": "0x1b4", // 436
                "hash": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "parentHash": "0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5",
                "nonce": "0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2",
                "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                "logsBloom": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
                "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                "stateRoot": "0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff",
                "miner": "0x4e65fda2159562a496f9f3522f89122a3088497a",
                "difficulty": "0x027f07", // 163591
                "totalDifficulty":  "0x027f07", // 163591
                "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "size":  "0x027f07", // 163591
                "gasLimit": "0x9f759", // 653145
                "minGasPrice": "0x9f759", // 653145
                "gasUsed": "0x9f759", // 653145
                "timestamp": "0x54e34e8e" // 1424182926
                "transactions": [{...},{ ... }]
                "uncles": ["0x1606e5...", "0xd5145a9..."]
                }
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Compilation.EthCompileLLL">
            <Summary>
                eth_compileLLL
                Returns compiled LLL code.
                Parameters
                String - The source code.
                params: [
                "(returnlll (suicide (caller)))",
                ]
                Returns
                DATA - The compiled source code.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_compileSolidity","params":["(returnlll (suicide
                (caller)))"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result":
                "0x603880600c6000396000f3006001600060e060020a600035048063c6888fa114601857005b6021600435602b565b8060005260206000f35b600081600702905091905056"
                // the compiled source code
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Compilation.EthCompileSerpent">
            <Summary>
                eth_compileSerpent
                Returns compiled serpent code.
                Parameters
                String - The source code.
                params: [
                "/* some serpent */",
                ]
                Returns
                DATA - The compiled source code.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_compileSerpent","params":["/* some serpent */"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result":
                "0x603880600c6000396000f3006001600060e060020a600035048063c6888fa114601857005b6021600435602b565b8060005260206000f35b600081600702905091905056"
                // the compiled source code
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Compilation.EthCompileSolidity">
            <summary>
                Returns compiled solidity code.
                Parameters
                1. String - The source code.
                params: [
                "contract test { function multiply(uint a) returns(uint d) {   return a * 7;   } }",
                ]
                Returns
                DATA - The compiled source code.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_compileSolidity","params":["contract test { function
                multiply(uint a) returns(uint d) {   return a * 7;   } }"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": {
                "code":
                "0x605880600c6000396000f3006000357c010000000000000000000000000000000000000000000000000000000090048063c6888fa114602e57005b603d6004803590602001506047565b8060005260206000f35b60006007820290506053565b91905056",
                "info": {
                "source": "contract test {\n   function multiply(uint a) constant returns(uint d) {\n       return a * 7;\n
                }\n}\n",
                "language": "Solidity",
                "languageVersion": "0",
                "compilerVersion": "0.9.19",
                "abiDefinition": [
                {
                "constant": true,
                "inputs": [
                {
                "name": "a",
                "type": "uint256"
                }
                ],
                "name": "multiply",
                "outputs": [
                {
                "name": "d",
                "type": "uint256"
                }
                ],
                "type": "function"
                }
                ],
                "userDoc": {
                "methods": {}
                },
                "developerDoc": {
                "methods": {}
                }
                }
                }
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Compilation.EthGetCompilers">
            <Summary>
                eth_getCompilers
                Returns a list of available compilers in the client.
                Parameters
                none
                Returns
                Array - Array of available compilers.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getCompilers","params":[],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": ["solidity", "lll", "serpent"]
                }
            </Summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Number">
            <summary>
                QUANTITY - the block number. null when its pending block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.ParentHash">
            <summary>
                DATA, 32 Bytes - hash of the parent block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Nonce">
            <summary>
                DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Sha3Uncles">
            <summary>
                DATA, 32 Bytes - SHA3 of the uncles data in the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.LogsBloom">
            <summary>
                DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.TransactionsRoot">
            <summary>
                DATA, 32 Bytes - the root of the transaction trie of the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.StateRoot">
            <summary>
                DATA, 32 Bytes - the root of the final state trie of the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.ReceiptsRoot">
            <summary>
                DATA, 32 Bytes - the root of the receipts trie of the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Miner">
            <summary>
                DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Difficulty">
            <summary>
                QUANTITY - integer of the difficulty for this block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.TotalDifficulty">
            <summary>
                QUANTITY - integer of the total difficulty of the chain until this block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.ExtraData">
            <summary>
                DATA - the "extra data" field of this block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Size">
            <summary>
                QUANTITY - integer the size of this block in bytes.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.GasLimit">
            <summary>
                QUANTITY - the maximum gas allowed in this block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.GasUsed">
            <summary>
                QUANTITY - the total used gas by all transactions in this block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Timestamp">
            <summary>
                QUANTITY - the unix timestamp for when the block was collated.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Block.Uncles">
            <summary>
                Array - Array of uncle hashes.
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.DTOs.BlockWithTransactionHashes">
            <summary>
                Block including just the transaction hashes
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.BlockWithTransactionHashes.TransactionHashes">
            <summary>
                Array - Array of transaction hashes
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.DTOs.BlockWithTransactions">
            <summary>
                Block including transaction objects
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.BlockWithTransactions.Transactions">
            <summary>
                Array - Array of transaction objects
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.DTOs.CallInput">
            <summary>
                Object - The transaction call object
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.CallInput.From">
            <summary>
                DATA, 20 Bytes - The address the transaction is send from.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.CallInput.To">
            <summary>
                DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.CallInput.Gas">
            <summary>
                QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution.It will return
                unused gas.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.CallInput.GasPrice">
            <summary>
                gasPrice: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.CallInput.Value">
            <summary>
                value: QUANTITY - (optional) Integer of the value send with this transaction
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.CallInput.Data">
            <summary>
                data: DATA - (optional) The compiled code of a contract
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.DTOs.TransactionInput">
            <summary>
                Object - The transaction object
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionInput.Nonce">
            <summary>
                nonce: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use
                the same nonce.
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.DTOs.SyncingOutput">
            <summary>
                Object - The transaction object
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.SyncingOutput.Synching">
            <summary>
                Is it synching?
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.SyncingOutput.StartingBlock">
            <summary>
                StartingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his
                head)
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.SyncingOutput.CurrentBlock">
            <summary>
                CurrentBlock: QUANTITY - The current block, same as eth_blockNumber
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.SyncingOutput.HighestBlock">
            <summary>
                HighestBlock: QUANTITY - The estimated highest block
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.TransactionHash">
            <summary>
                DATA, 32 Bytes - hash of the transaction.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.TransactionIndex">
            <summary>
                QUANTITY - integer of the transactions index position in the block. null when its pending.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.BlockNumber">
            <summary>
                QUANTITY - block number where this transaction was in. null when its pending.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.From">
            <summary>
                DATA, 20 Bytes - The address the transaction is send from.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.To">
            <summary>
                DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.Gas">
            <summary>
                QUANTITY - gas provided by the sender.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.GasPrice">
            <summary>
                QUANTITY - gas price provided by the sender in Wei.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.Value">
            <summary>
                QUANTITY - value transferred in Wei.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.Input">
            <summary>
                DATA - the data send along with the transaction.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.Transaction.Nonce">
            <summary>
                QUANTITY - the number of transactions made by the sender prior to this one.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.TransactionHash">
            <summary>
                DATA, 32 Bytes - hash of the transaction.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.TransactionIndex">
            <summary>
                QUANTITY - integer of the transactions index position in the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block where this transaction was in.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.BlockNumber">
            <summary>
                QUANTITY - block number where this transaction was in.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.CumulativeGasUsed">
            <summary>
                QUANTITY - The total amount of gas used when this transaction was executed in the block.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.GasUsed">
            <summary>
                QUANTITY - The amount of gas used by this specific transaction alone.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.ContractAddress">
            <summary>
                DATA, 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.DTOs.TransactionReceipt.Logs">
            <summary>
                logs: Array - Array of log objects, which this transaction generated.
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthGetFilterChangesForEthNewFilter">
            <Summary>
                Polling method for a filter, which returns an array of logs which occurred since last poll.
                Parameters
                QUANTITY - the filter id.
                params: [
                "0x16" // 22
                ]
                Returns
                Array - Array of log objects, or an empty array if nothing has changed since last poll.
                For filters created with eth_newBlockFilter the return are block hashes (DATA, 32 Bytes), e.g.
                ["0x3454645634534..."].
                For filters created with eth_newPendingTransactionFilter the return are transaction hashes (DATA, 32 Bytes), e.g.
                ["0x6345343454645..."].
                For filters created with eth_newFilter logs are objects with following params:
                type: TAG - pending when the log is pending. mined if log is already mined.
                logIndex: QUANTITY - integer of the log index position in the block. null when its pending log.
                transactionIndex: QUANTITY - integer of the transactions index position log was created from. null when its pending
                log.
                transactionHash: DATA, 32 Bytes - hash of the transactions this log was created from. null when its pending log.
                blockHash: DATA, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending
                log.
                blockNumber: QUANTITY - the block number where this log was in. null when its pending. null when its pending log.
                address: DATA, 20 Bytes - address from which this log originated.
                data: DATA - contains one or more 32 Bytes non-indexed arguments of the log.
                topics: Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is
                the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with
                the anonymous specifier.)
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getFilterChanges","params":["0x16"],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": [{
                "logIndex": "0x1", // 1
                "blockNumber":"0x1b4" // 436
                "blockHash": "0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d",
                "transactionHash":  "0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf",
                "transactionIndex": "0x0", // 0
                "address": "0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d",
                "data":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "topics": ["0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5"]
                },{
                ...
                }]
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthGetFilterChangesForBlockOrTransaction">
            <Summary>
                Polling method for a filter, which returns an array of logs which occurred since last poll.
                Parameters
                QUANTITY - the filter id.
                params: [
                "0x16" // 22
                ]
                Returns
                Array - Array of log objects, or an empty array if nothing has changed since last poll.
                For filters created with eth_newBlockFilter the return are block hashes (DATA, 32 Bytes), e.g.
                ["0x3454645634534..."].
                For filters created with eth_newPendingTransactionFilter the return are transaction hashes (DATA, 32 Bytes), e.g.
                ["0x6345343454645..."].
                For filters created with eth_newFilter logs are objects with following params:
                type: TAG - pending when the log is pending. mined if log is already mined.
                logIndex: QUANTITY - integer of the log index position in the block. null when its pending log.
                transactionIndex: QUANTITY - integer of the transactions index position log was created from. null when its pending
                log.
                transactionHash: DATA, 32 Bytes - hash of the transactions this log was created from. null when its pending log.
                blockHash: DATA, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending
                log.
                blockNumber: QUANTITY - the block number where this log was in. null when its pending. null when its pending log.
                address: DATA, 20 Bytes - address from which this log originated.
                data: DATA - contains one or more 32 Bytes non-indexed arguments of the log.
                topics: Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is
                the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with
                the anonymous specifier.)
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getFilterChanges","params":["0x16"],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": [{
                "logIndex": "0x1", // 1
                "blockNumber":"0x1b4" // 436
                "blockHash": "0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d",
                "transactionHash":  "0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf",
                "transactionIndex": "0x0", // 0
                "address": "0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d",
                "data":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "topics": ["0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5"]
                },{
                ...
                }]
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthGetFilterLogsForBlockOrTransaction">
            <Summary>
                eth_getFilterLogs
                Returns an array of all logs matching filter with given id.
                Parameters
                QUANTITY - The filter id.
                params: [
                "0x16" // 22
                ]
                Returns
                See eth_getFilterChanges
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getFilterLogs","params":["0x16"],"id":74}'
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthGetFilterLogsForEthNewFilter">
            <Summary>
                eth_getFilterLogs
                Returns an array of all logs matching filter with given id.
                Parameters
                QUANTITY - The filter id.
                params: [
                "0x16" // 22
                ]
                Returns
                See eth_getFilterChanges
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getFilterLogs","params":["0x16"],"id":74}'
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthGetLogs">
            <Summary>
                eth_getLogs
                Returns an array of all logs matching a given filter object.
                Parameters
                Object - the filter object, see eth_newFilter parameters.
                params: [{
                "topics": ["0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b"]
                }]
                Returns
                See eth_getFilterChanges
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getLogs","params":[{"topics":["0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b"]}],"id":74}'
                Result see eth_getFilterChanges
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthNewBlockFilter">
            <Summary>
                eth_newBlockFilter
                Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call
                eth_getFilterChanges.
                Parameters
                None
                Returns
                QUANTITY - A filter id.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_newBlockFilter","params":[],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc":  "2.0",
                "result": "0x1" // 1
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthNewFilter">
            <Summary>
                Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state
                has changed, call eth_getFilterChanges.
                A note on specifying topic filters:
                Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic
                filters:
                [] "anything"
                [A] "A in first position (and anything after)"
                [null, B] "anything in first position AND B in second position (and anything after)"
                [A, B] "A in first position AND B in second position (and anything after)"
                [[A, B], [A, B]] "(A OR B) in first position AND (A OR B) in second position (and anything after)"
                Parameters
                Object - The filter options:
                fromBlock: QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block
                or "pending", "earliest" for not yet mined transactions.
                toBlock: QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or
                "pending", "earliest" for not yet mined transactions.
                address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should
                originate.
                topics: Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also
                be an array of DATA with "or" options.
                params: [{
                "fromBlock": "0x1",
                "toBlock": "0x2",
                "address": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                "topics": ["0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b", null,
                [0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b,
                0x000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc]]
                }]
                Returns
                QUANTITY - A filter id.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_newFilter","params":[{"topics":["0x12341234"]}],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x1" // 1
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.NewFilterInput">
            <summary>
                Object - The transaction object
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.NewFilterInput.FromBlock">
            <summary>
                QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or
                "pending", "earliest" for not yet mined transactions.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.NewFilterInput.ToBlock">
            <summary>
                QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or
                "pending", "earliest" for not yet mined transactions.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.NewFilterInput.Address">
            <summary>
                address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should
                originate.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.NewFilterInput.Topics">
            <summary>
                topics: Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also
                be an array of DATA with "or" options.
            </summary>
            <see cref="!:https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#events" />
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.Type">
            <summary>
                TAG - pending when the log is pending. mined if log is already mined..
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.LogIndex">
            <summary>
                QUANTITY - integer of the log index position in the block. null when its pending log.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.TransactionHash">
            <summary>
                DATA, 32 Bytes - hash of the transactions this log was created from. null when its pending log.DATA, 32 Bytes -
                hash of the transaction.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.TransactionIndex">
            <summary>
                QUANTITY - integer of the transactions index position log was created from. null when its pending log.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.BlockNumber">
            <summary>
                QUANTITY - the block number where this log was in. null when its pending. null when its pending log.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.Address">
            <summary>
                DATA, 20 Bytes - address from which this log originated.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.Data">
            <summary>
                DATA - contains one or more 32 Bytes non-indexed arguments of the log.
            </summary>
        </member>
        <member name="P:Nethereum.RPC.Eth.Filters.FilterLog.Topics">
            <summary>
                Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments.
                (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)),
                except you declared the event with the anonymous specifier.)
            </summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthNewPendingTransactionFilter">
            <Summary>
                eth_newPendingTransactionFilter
                Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed,
                call eth_getFilterChanges.
                Parameters
                None
                Returns
                QUANTITY - A filter id.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_newPendingTransactionFilter","params":[],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc":  "2.0",
                "result": "0x1" // 1
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Filters.EthUninstallFilter">
            <Summary>
                eth_uninstallFilter
                Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters
                timeout when they aren't requested with eth_getFilterChanges for a period of time.
                Parameters
                QUANTITY - The filter id.
                params: [
                "0xb" // 11
                ]
                Returns
                Boolean - true if the filter was successfully uninstalled, otherwise false.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_uninstallFilter","params":["0xb"],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": true
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Mining.EthGetWork">
            <Summary>
                eth_getWork
                Returns the hash of the current block, the seedHash, and the boundary condition to be met ("target").
                Parameters
                none
                Returns
                Array - Array with the following properties:
                DATA, 32 Bytes - current block header pow-hash
                DATA, 32 Bytes - the seed hash used for the DAG.
                DATA, 32 Bytes - the boundary condition ("target"), 2^256 / difficulty.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getWork","params":[],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": [
                "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
                "0x5EED00000000000000000000000000005EED0000000000000000000000000000",
                "0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000"
                ]
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Mining.EthHashrate">
            <Summary>
                eth_hashrate
                Returns the number of hashes per second that the node is mining with.
                Parameters
                none
                Returns
                QUANTITY - number of hashes per second.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_hashrate","params":[],"id":71}'
                Result
                {
                "id":71,
                "jsonrpc": "2.0",
                "result": "0x38a"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Mining.EthMining">
            <Summary>
                eth_mining
                Returns true if client is actively mining new blocks.
                Parameters
                none
                Returns
                Boolean - returns true of the client is mining, otherwise false.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_mining","params":[],"id":71}'
                Result
                {
                "id":71,
                "jsonrpc": "2.0",
                "result": true
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Mining.EthSubmitHashrate">
            <Summary>
                eth_submitHashrate
                Used for submitting mining hashrate.
                Parameters
                Hashrate, a hexadecimal string representation (32 bytes) of the hash rate
                ID, String - A random hexadecimal(32 bytes) ID identifying the client
                params: [
                "0x0000000000000000000000000000000000000000000000000000000000500000",
                "0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c"
                ]
                Returns
                Boolean - returns true if submitting went through succesfully and false otherwise.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0", "method":"eth_submitHashrate",
                "params":["0x0000000000000000000000000000000000000000000000000000000000500000",
                "0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c"],"id":73}'
                Result
                {
                "id":73,
                "jsonrpc":"2.0",
                "result": true
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Mining.EthSubmitWork">
            <Summary>
                eth_submitWork
                Used for submitting a proof-of-work solution.
                Parameters
                DATA, 8 Bytes - The nonce found (64 bits)
                DATA, 32 Bytes - The header's pow-hash (256 bits)
                DATA, 32 Bytes - The mix digest (256 bits)
                params: [
                "0x0000000000000001",
                "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
                "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
                ]
                Returns
                Boolean - returns true if the provided solution is valid, otherwise false.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0", "method":"eth_submitWork", "params":["0x0000000000000001",
                "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
                "0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000"],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": true
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthCall">
            <Summary>
                eth_call
                Executes a new message call immediately without creating a transaction on the block chain.
                Parameters
                Object - The transaction call object
                from: DATA, 20 Bytes - (optional) The address the transaction is send from.
                to: DATA, 20 Bytes - The address the transaction is directed to.
                gas: QUANTITY - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas,
                but this parameter may be needed by some executions.
                gasPrice: QUANTITY - (optional) Integer of the gasPrice used for each paid gas
                value: QUANTITY - (optional) Integer of the value send with this transaction
                data: DATA - (optional) Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI
                QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block
                parameter
                Returns
                DATA - the return value of executed contract.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_call","params":[{see above}],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x0"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthEstimateGas">
            <Summary>
                eth_estimateGas
                Makes a call or transaction, which won't be added to the blockchain and returns the used gas, which can be used for
                estimating the used gas.
                Parameters
                See eth_call parameters, expect that all properties are optional.
                Returns
                QUANTITY - the amount of gas used.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_estimateGas","params":[{see above}],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x5208" // 21000
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthGetTransactionByBlockHashAndIndex">
            <Summary>
                eth_getTransactionByBlockHashAndIndex
                Returns information about a transaction by block hash and transaction index position.
                Parameters
                DATA, 32 Bytes - hash of a block.
                QUANTITY - integer of the transaction index position.
                params: [
                '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331',
                '0x0' // 0
                ]
                Returns
                Transaction
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getTransactionByBlockHashAndIndex","params":[0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b,
                "0x0"],"id":1}'
                Result see eth_getTransactionByHash
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthGetTransactionByBlockNumberAndIndex">
            <Summary>
                eth_getTransactionByBlockNumberAndIndex
                Returns information about a transaction by block number and transaction index position.
                Parameters
                QUANTITY|TAG - a block number, or the string "earliest", "latest" or "pending", as in the default block parameter.
                QUANTITY - the transaction index position.
                params: [
                '0x29c', // 668
                '0x0' // 0
                ]
                Returns
                Transaction
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getTransactionByBlockNumberAndIndex","params":["0x29c",
                "0x0"],"id":1}'
                Result see eth_getTransactionByHash
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthGetTransactionByHash">
            <Summary>
                eth_getTransactionByHash
                Returns the information about a transaction requested by transaction hash.
                Parameters
                DATA, 32 Bytes - hash of a transaction
                params: [
                "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"
                ]
                Returns
                Object - A transaction object, or null when no transaction was found:
                hash: DATA, 32 Bytes - hash of the transaction.
                nonce: QUANTITY - the number of transactions made by the sender prior to this one.
                blockHash: DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.
                blockNumber: QUANTITY - block number where this transaction was in. null when its pending.
                transactionIndex: QUANTITY - integer of the transactions index position in the block. null when its pending.
                from: DATA, 20 Bytes - address of the sender.
                to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.
                value: QUANTITY - value transferred in Wei.
                gasPrice: QUANTITY - gas price provided by the sender in Wei.
                gas: QUANTITY - gas provided by the sender.
                input: DATA - the data send along with the transaction.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getTransactionByHash","params":["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": {
                "hash":"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b",
                "nonce":"0x",
                "blockHash": "0xbeab0aa2411b7ab17f30a99d3cb9c6ef2fc5426d6ad6fd9e2a26a6aed1d1055b",
                "blockNumber": "0x15df", // 5599
                "transactionIndex":  "0x1", // 1
                "from":"0x407d73d8a49eeb85d32cf465507dd71d507100c1",
                "to":"0x85h43d8a49eeb85d32cf465507dd71d507100c1",
                "value":"0x7f110" // 520464
                "gas": "0x7f110" // 520464
                "gasPrice":"0x09184e72a000",
                "input":"0x603880600c6000396000f300603880600c6000396000f3603880600c6000396000f360",
                }
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthGetTransactionCount">
            <Summary>
                eth_getTransactionCount
                Returns the number of transactions sent from an address.
                Parameters
                DATA, 20 Bytes - address.
                QUANTITY|TAG - integer block number, or the string "latest", "earliest" or "pending", see the default block
                parameter
                params: [
                '0x407d73d8a49eeb85d32cf465507dd71d507100c1',
                'latest' // state at the latest block
                ]
                Returns
                QUANTITY - integer of the number of transactions send from this address.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getTransactionCount","params":["0x407d73d8a49eeb85d32cf465507dd71d507100c1","latest"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x1" // 1
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthGetTransactionReceipt">
            <Summary>
                Returns the receipt of a transaction by transaction hash.
                Note That the receipt is not available for pending transactions.
                Parameters
                DATA, 32 Bytes - hash of a transaction
                params: [
                '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238'
                ]
                Returns
                Object - A transaction receipt object, or null when no receipt was found:
                transactionHash: DATA, 32 Bytes - hash of the transaction.
                transactionIndex: QUANTITY - integer of the transactions index position in the block.
                blockHash: DATA, 32 Bytes - hash of the block where this transaction was in.
                blockNumber: QUANTITY - block number where this transaction was in.
                cumulativeGasUsed: QUANTITY - The total amount of gas used when this transaction was executed in the block.
                gasUsed: QUANTITY - The amount of gas used by this specific transaction alone.
                contractAddress: DATA, 20 Bytes - The contract address created, if the transaction was a contract creation,
                otherwise null.
                logs: Array - Array of log objects, which this transaction generated.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getTransactionReceipt","params":["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc":"2.0",
                "result": {
                transactionHash: '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238',
                transactionIndex:  '0x1', // 1
                blockNumber: '0xb', // 11
                blockHash: '0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b',
                cumulativeGasUsed: '0x33bc', // 13244
                gasUsed: '0x4dc', // 1244
                contractAddress: '0xb60e8dd61c5d32be8058bb8eb970870f07233155' // or null, if none was created
                logs: [{
                // logs as returned by getFilterLogs, etc.
                }, ...]
                }
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Transactions.EthSendRawTransaction">
            <Summary>
                eth_sendRawTransaction
                Creates new message call transaction or a contract creation for signed transactions.
                Parameters
                DATA, The signed transaction data.
                params: ["0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"]
                Returns
                DATA, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.
                Use eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a
                contract.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_sendRawTransaction","params":[{see above}],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Uncles.EthGetUncleCountByBlockHash">
            <Summary>
                eth_getUncleCountByBlockHash
                Returns the number of uncles in a block from a block matching the given block hash.
                Parameters
                DATA, 32 Bytes - hash of a block
                params: [
                '0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238'
                ]
                Returns
                QUANTITY - integer of the number of uncles in this block.
                Example
                Request
                curl -X POST --data
                '{"jsonrpc":"2.0","method":"eth_getUncleCountByBlockHash","params":["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"],"id"Block:1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x1" // 1
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Eth.Uncles.EthGetUncleCountByBlockNumber">
            <Summary>
                eth_getUncleCountByBlockNumber
                Returns the number of uncles in a block from a block matching the given block number.
                Parameters
                QUANTITY - integer of a block number, or the string "latest", "earliest" or "pending", see the default block
                parameter
                params: [
                '0xe8', // 232
                ]
                Returns
                QUANTITY - integer of the number of uncles in this block.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getUncleCountByBlockNumber","params":["0xe8"],"id":1}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result": "0x1" // 1
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Net.NetListening">
            <Summary>
                net_listening
                Returns true if client is actively listening for network connections.
                Parameters
                none
                Returns
                Boolean - true when listening, otherwise false.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":67}'
                Result
                {
                "id":67,
                "jsonrpc":"2.0",
                "result":true
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Net.NetPeerCount">
            <Summary>
                net_peerCount
                Returns number of peers currenly connected to the client.
                Parameters
                none
                Returns
                QUANTITY - integer of the number of connected peers.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":74}'
                Result
                {
                "id":74,
                "jsonrpc": "2.0",
                "result": "0x2" // 2
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Net.NetVersion">
            <Summary>
                net_version
                Returns the current network protocol version.
                Parameters
                none
                Returns
                String - The current network protocol version
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"net_version","params":[],"id":67}'
                Result
                {
                "id":67,
                "jsonrpc": "2.0",
                "result": "59"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Personal.PersonalListAccounts">
            <Summary>
                personal_listAccounts
                List all accounts
                Parameters
                none
                Return
                array collection with accounts
                Example
                personal.listAccounts
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Personal.PersonalNewAccount">
            <Summary>
                Create a new account
                Parameters
                string, passphrase to protect the account
                Return
                string address of the new account
                Example
                personal.newAccount("mypasswd")
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Personal.PersonalUnlockAccount">
            <Summary>
                personal_unlockAccount
                Unlock an account
                Parameters
                string, address of the account to unlock
                string, passphrase of the account to unlock (optional in console, user will be prompted)
                integer, unlock account for duration seconds (optional)
                Return
                boolean indication if the account was unlocked
                Example
                personal.unlockAccount(eth.coinbase, "mypasswd", 300)
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Shh.ShhNewIdentity">
            <Summary>
                shh_newIdentity
                Creates new whisper identity in the client.
                Parameters
                none
                Returns
                DATA, 60 Bytes - the address of the new identiy.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"shh_newIdentity","params":[],"id":73}'
                Result
                {
                "id":1,
                "jsonrpc": "2.0",
                "result":
                "0xc931d93e97ab07fe42d923478ba2465f283f440fd6cabea4dd7a2c807108f651b7135d1d6ca9007d5b68aa497e4619ac10aa3b27726e1863c1fd9b570d99bbaf"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Shh.ShhVersion">
            <Summary>
                shh_version
                Returns the current whisper protocol version.
                Parameters
                none
                Returns
                String - The current whisper protocol version
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"shh_version","params":[],"id":67}'
                Result
                {
                "id":67,
                "jsonrpc": "2.0",
                "result": "2"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Web3.Web3ClientVersion">
            <Summary>
                web3_clientVersion
                Returns the current client version.
                Parameters
                none
                Returns
                String - The current client version
                Curl Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":67}'
                Result
                {
                "id":67,
                "jsonrpc":"2.0",
                "result": "Mist/v0.9.3/darwin/go1.4.1"
                }
            </Summary>
        </member>
        <member name="T:Nethereum.RPC.Web3.Web3Sha3">
            <summary>
                web3_sha3
                Returns Keccak-256 (not the standardized SHA3-256) of the given data.
                Parameters
                1. String - the data to convert into a SHA3 hash
                params: [
                '0x68656c6c6f20776f726c64'
                ]
                Returns
                DATA - The SHA3 result of the given string.
                Example
                Request
                curl -X POST --data '{"jsonrpc":"2.0","method":"web3_sha3","params":["0x68656c6c6f20776f726c64"],"id":64}'
                Result
                {
                "id":64,
                "jsonrpc": "2.0",
                "result": "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad"
                }
            </summary>
        </member>
    </members>
</doc>
